/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Patients;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.VitalSigns;

/**
 *
 * @author gaurav
 */
public class UpdatePatientDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdatePatientDetailsJPanel
     */
    JPanel userProcessContainer;
    Patient patient;
    EncounterHistory encounterHistory;
    Encounter encounter;
    VitalSigns vitalSigns;

    public UpdatePatientDetailsJPanel(JPanel userProcessContainer, Encounter e, Patient p) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.encounter = e;
        this.vitalSigns = e.getVitalSigns();
        this.patient = patient;
        lblPatientName.setText(p.getPerson().getName());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblBodyTemperature = new javax.swing.JLabel();
        lblPulseRate = new javax.swing.JLabel();
        lblRespirationRate = new javax.swing.JLabel();
        lblBloodPressure = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        lblGlucoseLevel = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        txtGlucoseLevel = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        txtBloodPressure = new javax.swing.JTextField();
        txtRespirationRate = new javax.swing.JTextField();
        txtPulseRate = new javax.swing.JTextField();
        txtBodyTemperature = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblPatientName = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Update Vital Signs For");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 160, 54));

        lblBodyTemperature.setText("Body Temperature :");
        add(lblBodyTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 119, -1, -1));

        lblPulseRate.setText("Pulse Rate :");
        add(lblPulseRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 171, -1, -1));

        lblRespirationRate.setText("Respiration Rate :");
        add(lblRespirationRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 225, -1, -1));

        lblBloodPressure.setText("Blood Pressure :");
        add(lblBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 277, -1, -1));

        lblHeight.setText("Height :");
        add(lblHeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 326, -1, -1));

        lblGlucoseLevel.setText("Glucose Level :");
        add(lblGlucoseLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 371, -1, -1));

        lblWeight.setText("Weight :");
        add(lblWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 418, -1, -1));

        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });
        add(txtWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 408, 98, -1));
        add(txtGlucoseLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 364, 98, -1));
        add(txtHeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 320, 98, -1));
        add(txtBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 272, 98, -1));
        add(txtRespirationRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 215, 98, -1));
        add(txtPulseRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 166, 98, -1));

        txtBodyTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBodyTemperatureActionPerformed(evt);
            }
        });
        add(txtBodyTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 114, 98, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 476, -1, -1));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));
        add(lblPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 140, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void txtBodyTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBodyTemperatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBodyTemperatureActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        if (txtBloodPressure.getText().isEmpty()
                && txtBodyTemperature.getText().isEmpty()
                && txtGlucoseLevel.getText().isEmpty()
                && txtHeight.getText().isEmpty()
                && txtPulseRate.getText().isEmpty()
                && txtRespirationRate.getText().isEmpty()
                && txtWeight.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter appropriate values to Update");
            return;
        }
        double bodyTemperature = 0;
        double pulseRate = 0;
        double respirationRate = 0;
        double bloodPressure = 0;
        double height = 0;
        double glucoseLevel = 0;
        double weight = 0;

        if (!txtBodyTemperature.getText().isEmpty()) {
            try {
                bodyTemperature = Double.parseDouble(txtBodyTemperature.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Body Temperature");
                return;
            }
            if (bodyTemperature < 97 || bodyTemperature > 100) {
                JOptionPane.showMessageDialog(this, "Body Temperature should not be less than 97 and not more than 100 F1.");
                return;
            }
        }

        if (!txtPulseRate.getText().isEmpty()) {
            try {
                pulseRate = Double.parseDouble(txtPulseRate.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Pulse Rate");
                return;
            }
            if (pulseRate < 50 || pulseRate > 110) {
                JOptionPane.showMessageDialog(this, "Pulse Rate should not be less than 50 and not more than 110.");
                return;
            }
            
        }

        if (!txtGlucoseLevel.getText().isEmpty()) {
            try {
                glucoseLevel = Double.parseDouble(txtGlucoseLevel.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Glucose Level");
                return;
            }
            if (glucoseLevel < 120 || glucoseLevel > 220) {
                JOptionPane.showMessageDialog(this, "Glucose Level should not be less than 120 and not more than 220.");
                return;
            }
        }

        if (!txtBloodPressure.getText().isEmpty()) {
            try {
                bloodPressure = Double.parseDouble(txtBloodPressure.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Blood Pressure");
                return;
            }
            if (bloodPressure < 110 || bloodPressure > 150) {
                JOptionPane.showMessageDialog(this, "Blood Pressure should not be less than 110 and not more than 150.");
                return;
            }
        }

        if (!txtHeight.getText().isEmpty()) {
            try {
                height = Double.parseDouble(txtHeight.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Height");
                return;
            }
            if (height < 1 || height > 8) {
                JOptionPane.showMessageDialog(this, "Height should not be less than 1 and not more than 8 ft.");
                return;
            }
        }

        if (!txtRespirationRate.getText().isEmpty()) {
            try {
                respirationRate = Double.parseDouble(txtRespirationRate.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Respiration Rate");
                return;
            }
            if (respirationRate < 10 || respirationRate > 20) {
                JOptionPane.showMessageDialog(this, "Respiration Rate should not be less than 10 and not more than 20.");
                return;
            }
        }

        if (!txtWeight.getText().isEmpty()) {
            try {
                weight = Double.parseDouble(txtWeight.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insert Proper values for Weight");
                return;
            }
            if (weight < 1 || weight > 300) {
                JOptionPane.showMessageDialog(this, "Weight should not be less than 1 and not more than 300 lbs.");
                return;
            }
        }

        try {

            if (bodyTemperature != 0) {
                vitalSigns.setBodyTemperature(bodyTemperature);
            }

            if (pulseRate != 0) {
                vitalSigns.setPulseRate(pulseRate);
            }

            if (respirationRate != 0) {
                vitalSigns.setRespirationRate(respirationRate);
            }
            if (bloodPressure != 0) {
                vitalSigns.setBloodPressure(bloodPressure);
            }

            if (height != 0) {
                vitalSigns.setHeight(height);
            }

            if (glucoseLevel != 0) {
                vitalSigns.setGlucoseLevel(glucoseLevel);
            }
            if (weight != 0) {
                vitalSigns.setWeight(weight);
            }

            encounter.setVitalSigns(vitalSigns);

            JOptionPane.showMessageDialog(this, "Vital Signs Details Are Updated!!");
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Provide proper details!!");
        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //       userProcessContainer.remove(this);
        //       Component[] componentArray = userProcessContainer.getComponents();
        //     Component component = componentArray[componentArray.length - 1];
        //    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //  layout.previous(userProcessContainer);

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ViewPatientDetailsJPanel viewPatientDetailsJPanel = (ViewPatientDetailsJPanel) component;
        viewPatientDetailsJPanel.refreshTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblBodyTemperature;
    private javax.swing.JLabel lblGlucoseLevel;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPulseRate;
    private javax.swing.JLabel lblRespirationRate;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtBodyTemperature;
    private javax.swing.JTextField txtGlucoseLevel;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtPulseRate;
    private javax.swing.JTextField txtRespirationRate;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
