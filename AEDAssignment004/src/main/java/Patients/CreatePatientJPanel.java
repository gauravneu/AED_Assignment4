/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Patients;

import java.awt.CardLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.City;
import model.CityDirectory;
import model.Community;
import model.Encounter;
import model.EncounterHistory;

import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author gaurav
 */
public class CreatePatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePatientJPanel
     */
    JPanel userProcessContainer;
    PatientDirectory pd;
    Patient patient;
    PersonDirectory ps;
    Person person;
    Community community;
    House house;
    CityDirectory cityDir;
    private final JFileChooser choosePic;
    private BufferedImage image;
    EncounterHistory encounterHistory;
    Encounter encounter;
    VitalSigns vitalSigns;

    public CreatePatientJPanel(JPanel userProcessContainer, PatientDirectory pd, CityDirectory cityDir) {

        choosePic = new JFileChooser();
        choosePic.setFileFilter(new FileNameExtensionFilter("jpeg Files", "jpeg"));
        this.pd = pd;
        this.cityDir = cityDir;
        initComponents();
        this.userProcessContainer = userProcessContainer;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtMessage = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        txtStreet = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        lblCommunity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lblPinCode = new javax.swing.JLabel();
        txtApartmentNo = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 100, 88, -1));

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });
        add(txtAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 144, 88, -1));
        add(txtGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 188, 88, -1));
        add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 232, 88, -1));

        jLabel1.setText("Name :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 105, -1, -1));

        jLabel2.setText("Age :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 149, -1, -1));

        jLabel3.setText("Phone :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(226, 237, -1, -1));

        btnAdd.setText("Add Patient");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSearch.setText("Search image");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel4.setText("Photo :");

        btnLoad.setText("Load Patients");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(223, 223, 223)
                                .addComponent(jLabel4)
                                .addGap(246, 246, 246))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)))
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(btnAdd)
                        .addGap(173, 173, 173)
                        .addComponent(btnLoad)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnLoad))
                .addGap(63, 63, 63))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 442, -1, -1));

        jLabel7.setText("Gender :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 188, -1, 26));

        jLabel9.setText("Street :");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 281, -1, -1));

        lblCity.setText("City :");
        add(lblCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 325, -1, -1));
        add(txtStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 276, 88, -1));
        add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 320, 88, -1));

        lblCommunity.setText("Community :");
        add(lblCommunity, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 369, -1, -1));
        add(txtCommunity, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 364, 88, -1));

        jLabel5.setText("Create New Patients");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 31, 163, 29));

        lblPinCode.setText("Apartment No :");
        add(lblPinCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 413, -1, -1));
        add(txtApartmentNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 408, 89, -1));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        try {

            int age = 0;
            String gender = txtGender.getText();
            String name = txtName.getText();
            long phoneNumber = 0;
            String street = txtStreet.getText();
            String communityName = txtCommunity.getText();
            String cityName = txtCity.getText();
            int aptNo = 0;

            try {
                age = Integer.parseInt(txtAge.getText());
                phoneNumber = Long.parseLong(txtPhone.getText());
                aptNo = Integer.parseInt(txtApartmentNo.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please provide correct values "
                        + "for Age, Phone Number,Apartment no and PinCode");
            }

            if (image == null) {
                JOptionPane.showMessageDialog(this, "Choose Image");
                return;
            }

            if (age < 1 || age > 120) {
                JOptionPane.showMessageDialog(this, "Age should be greater than 0 an less than 121.");
                return;
            }

            if (!(gender.equals("Female") || gender.equals("Male"))) {
                JOptionPane.showMessageDialog(this, "Gender should be 'Male' or 'Female'");
                return;
            }

            if (phoneNumber > 10000000001l || phoneNumber < 1000000000) {
                JOptionPane.showMessageDialog(this, "Phone Number should be of 10 digits.");
                return;
            }

            if (cityDir.emptyCityDir() || (!(cityDir.isExistingCity(cityName)))) {

                //               System.out.println("Empty Directory or Non-Existing City");
                patient = pd.addPatient();
                person = new Person();
                house = new House();
                Community newCommunity;
                City newCity = cityDir.addCity();
                newCity.setcityName(cityName);
                newCommunity = newCity.addCommunity();
                newCommunity.setCommunityName(communityName);
                house = newCommunity.addHouse();
                house.setAppartmentNo(aptNo);
                house.setStreet(street);
                house.setCityName(cityName);
                house.setCommunity(newCommunity);
                house.setCity(newCity);
            } else if (!(cityDir.isExistingCommunityInGivenCity(communityName, cityName))) {
                //              System.out.println("Existing City but new Community");

                City c = cityDir.getCity(cityName);
                Community c1 = c.addCommunity();
                c1.setCommunityName(communityName);
                c1.setCity(c);
                house = c1.addHouse();
                house.setAppartmentNo(aptNo);
                house.setStreet(street);
                house.setCityName(cityName);
                house.setCommunity(c1);
                house.setCity(c);
            } else if (cityDir.isExistingHouseInExistingCommunityInGivenCity(communityName, cityName, aptNo, street)) {

                //               System.out.println("Existing house in given community and city");
                City c = cityDir.getCity(cityName);
                //           System.out.println(c.getcityName() + "Create Pateint all existing");
                Community c1 = c.getCommunity(communityName);
                //         System.out.println(c1.getCommunityName() + "Create Pateint all existing");
                house = c1.getHouse(aptNo, street);
                //       System.out.println("Inside second else if :" + house.getCityName());
            } else if ((cityDir.isExistingCommunityInGivenCity(communityName, cityName))
                    && (!(cityDir.isExistingHouseInExistingCommunityInGivenCity(communityName, cityName, aptNo, street)))) {
                System.out.println("Existing Community in given City but new House");

                City c = cityDir.getCity(cityName);
                Community c1 = c.getCommunity(communityName);
                house = c1.addHouse();
                house.setAppartmentNo(aptNo);
                house.setCityName(cityName);
                house.setCommunity(c1);
                house.setStreet(street);
                house.setCity(c);
            }

            patient.setPhoto(image);
            person.setAge(age);
            person.setGender(gender);
            person.setName(name);
            person.setPhoneNumber(phoneNumber);
            person.setHouse(house);
            patient.setPerson(person);
            JOptionPane.showMessageDialog(this, "Patient Added");

            txtAge.setText("");
            txtCity.setText("");
            txtCommunity.setText("");
            txtGender.setText("");
            txtName.setText("");
            txtPhone.setText("");
            txtApartmentNo.setText("");
            txtStreet.setText("");

        } catch (Exception ex) {
            Logger.getLogger(ViewPatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAddActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int openValue = choosePic.showOpenDialog(this);

        if (openValue == JFileChooser.APPROVE_OPTION) {
            try {
                image = ImageIO.read(choosePic.getSelectedFile());
                txtMessage.setText("Image Chosen");
            } catch (IOException ioe) {
                txtMessage.setText("Error Getting Image");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose Photo!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:

        System.out.println("Start");

        FileReader reader = null;
        System.out.println("Reader Line done");
        try {
            System.out.println("Try block of reader");
            reader = new FileReader("./config.properties");
            System.out.println("file read");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("After file");
        Properties patientProp = new Properties();
        try {
            patientProp.load(reader);
        } catch (IOException ex) {
            Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Before image");
        BufferedImage image1 = null;
        try {
            image1 = ImageIO.read(new File("./Patient.jpeg"));
            System.out.println("Image Set");
        } catch (IOException ex) {
            Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        int i;
        for (i = 1; i < 10; i++) {
            System.out.println("For Loop");
            //           for (Patient patient1 : pd.getPatientList()) {
            System.out.println("Internal For Loop");
            patient = pd.addPatient();
            person = new Person();
            house = new House();
            Community newCommunity;
            encounterHistory = new EncounterHistory();
            int age = 0;
            String gender = patientProp.getProperty("gender" + String.valueOf(i));
            String name = patientProp.getProperty("name" + String.valueOf(i));
            long phoneNumber = 0;
            String street = patientProp.getProperty("street" + String.valueOf(i));
            String communityName = patientProp.getProperty("communityName" + String.valueOf(i));
            String cityName = patientProp.getProperty("cityName" + String.valueOf(i));
            int aptNo = 0;
            String chiefComplaint = patientProp.getProperty("chiefComplaint" + String.valueOf(i));

            double bodyTemperature = 0;
            double pulseRate = 0;
            double respirationRate = 0;
            double bloodPressure = 0;
            double height = 0;
            double glucoseLevel = 0;
            double weight = 0;

            try {
                age = Integer.parseInt(patientProp.getProperty("age" + String.valueOf(i)));
                phoneNumber = Long.parseLong(patientProp.getProperty("phoneNumber" + String.valueOf(i)));
                aptNo = Integer.parseInt(patientProp.getProperty("aptNo" + String.valueOf(i)));
                bodyTemperature = Double.parseDouble(patientProp.getProperty("bodyTemperature" + String.valueOf(i)));
                pulseRate = Double.parseDouble(patientProp.getProperty("pulseRate" + String.valueOf(i)));
                respirationRate = Double.parseDouble(patientProp.getProperty("respirationRate" + String.valueOf(i)));
                bloodPressure = Double.parseDouble(patientProp.getProperty("bloodPressure" + String.valueOf(i)));
                height = Double.parseDouble(patientProp.getProperty("height" + String.valueOf(i)));
                glucoseLevel = Double.parseDouble(patientProp.getProperty("glucoseLevel" + String.valueOf(i)));
                weight = Double.parseDouble(patientProp.getProperty("weight" + String.valueOf(i)));

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please provide correct values "
                        + "for Age, Phone Number, Apt No, Body Temperature, Pulse Rate, Respiration Rate, Blood Pressure, Height, Glucose Level, Weight in config file for Patient :" + i);
            }

            if (image1 == null) {
                JOptionPane.showMessageDialog(this, "Choose Image");
                return;
            }

            if (age < 1 || age > 120) {
                JOptionPane.showMessageDialog(this, "Age should be greater than 0 an less than 121.");
                return;
            }

            if (!(gender.equals("Female") || gender.equals("Male"))) {
                JOptionPane.showMessageDialog(this, "Gender should be 'Male' or 'Female'");
                return;
            }

            if (phoneNumber > 10000000001l || phoneNumber < 1000000000) {
                JOptionPane.showMessageDialog(this, "Phone Number should be of 10 digits.");
                return;
            }

            if (cityDir.emptyCityDir() || (!(cityDir.isExistingCity(cityName)))) {
                City newCity = cityDir.addCity();
                newCity.setcityName(cityName);
                newCommunity = newCity.addCommunity();
                newCommunity.setCommunityName(communityName);
                house = newCommunity.addHouse();
                house.setAppartmentNo(aptNo);
                house.setStreet(street);
                house.setCityName(cityName);
                house.setCommunity(newCommunity);
                house.setCity(newCity);
            } else if (!(cityDir.isExistingCommunityInGivenCity(communityName, cityName))) {
                City c = cityDir.getCity(cityName);
                Community c1 = c.addCommunity();
                c1.setCommunityName(communityName);
                c1.setCity(c);
                house = c1.addHouse();
                house.setAppartmentNo(aptNo);
                house.setStreet(street);
                house.setCityName(cityName);
                house.setCommunity(c1);
                house.setCity(c);
            } else if (cityDir.isExistingHouseInExistingCommunityInGivenCity(communityName, cityName, aptNo, street)) {
                City c = cityDir.getCity(cityName);
                Community c1 = c.getCommunity(communityName);
                house = c1.getHouse(aptNo, street);
            } else if ((cityDir.isExistingCommunityInGivenCity(communityName, cityName))
                    && (!(cityDir.isExistingHouseInExistingCommunityInGivenCity(communityName, cityName, aptNo, street)))) {
                System.out.println("Existing Community in given City but new House");
                City c = cityDir.getCity(cityName);
                Community c1 = c.getCommunity(communityName);
                house = c1.addHouse();
                house.setAppartmentNo(aptNo);
                house.setCityName(cityName);
                house.setCommunity(c1);
                house.setStreet(street);
                house.setCity(c);
            }

            System.out.println("Patient No :" + patient.getPatientNo());
            System.out.println("Vital Signs Line Starts");
            vitalSigns = new VitalSigns();

            if (bodyTemperature != 0) {
                vitalSigns.setBodyTemperature(bodyTemperature);
            }

            if (pulseRate != 0) {
                vitalSigns.setPulseRate(pulseRate);
            }

            if (respirationRate != 0) {
                vitalSigns.setRespirationRate(respirationRate);
            }
            if (bloodPressure != 0) {
                vitalSigns.setBloodPressure(bloodPressure);
            }

            if (height != 0) {
                vitalSigns.setHeight(height);
            }

            if (glucoseLevel != 0) {
                vitalSigns.setGlucoseLevel(glucoseLevel);
            }
            if (weight != 0) {
                vitalSigns.setWeight(weight);
            }

            encounter = encounterHistory.addNewEncounter();
            encounter.setVitalSigns(vitalSigns);
            patient.setEncounterHistory(encounterHistory);
            patient.setPhoto(image);
            person.setAge(age);
            person.setGender(gender);
            person.setName(name);
            person.setPhoneNumber(phoneNumber);
            person.setHouse(house);
            patient.setPerson(person);
            patient.setChiefComplaint(chiefComplaint);

            patient.setPhoto(image1);
            //           }
        }
        JOptionPane.showMessageDialog(null, "Patient Loaded!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
//        Component[] componentArray = userProcessContainer.getComponents();
//        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblPinCode;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtApartmentNo;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtGender;
    private javax.swing.JLabel txtMessage;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtStreet;
    // End of variables declaration//GEN-END:variables
}
